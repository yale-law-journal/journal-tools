service: journal-tools-backend

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10

  apiGateway:
    minimumCompressionSize: 65536

  environment:
    STAGE: ${self:custom.stage}
    NODE_ENV: development
    ROOT_URL: !Join
      - ""
      - - https://
        - !Ref ApiGatewayRestApi
        - .execute-api.${self:custom.region}.amazonaws.com
        - /${self:custom.stage}
    PROGRESS_QUEUE_ARN: !ImportValue ProgressQueueArn-${self:custom.stage}
    SOCKET_URL: !ImportValue SocketUrl-${self:custom.stage}
    UPLOADS_BUCKET: !ImportValue S3Uploads-${self:custom.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - es:*
      Resource: ${file(config.json):production.elasticsearch.arn}
    - Effect: Allow
      Action:
        - s3:HeadBucket
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:ListBucketMultipartUploads
        - s3:ListMultipartUploadParts
        - s3:AbortMultipartUpload
        - s3:DeleteObject
      Resource:
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - !ImportValue S3Uploads-${self:custom.stage}
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - !ImportValue S3Uploads-${self:custom.stage}
            - /*
    - Effect: Allow
      Action:
        - lambda:CreateEventSourceMapping
      Resource:
        - "*"
  iamManagedPolicies:
    - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
    - arn:aws:iam::aws:policy/AmazonSQSFullAccess
    - arn:aws:iam::aws:policy/AmazonESFullAccess

package:
  exclude:
    - claudia_deploy.sh
    - claudia.json
    - bin/**
    - cleaning/**
    - data/**
    - node_modules/**
    - src/**
    - venv/**
  include:
    - app.js
    - config.js
    - elasticsearch.js
    - lambda.js
    - models.js
    - passport.js
    - sql.js
    - data/abbreviations.json
    - routes/*.js

functions:
  apiServer:
    handler: lambda.handler
    timeout: 15
    events:
      - http: ANY /api/{proxy+}
    layers:
      - Ref: DepsLambdaLayer

layers:
  deps:
    path: deps
    compatibleRuntimes:
      - nodejs8.10
    package:
      exclude:
        - nodejs/node_modules/**/aws-sdk/**
        - nodejs/node_modules/**/moment-timezone/builds/**
        - nodejs/node_modules/**/moment/min/**
        - nodejs/node_modules/elasticsearch/src/lib/apis/*_*.js
      include:
        - nodejs/node_modules/elasticsearch/src/lib/apis/6_4.js

resources:
  Resources:
    S3ReadRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ApigS3ReadOnly-${self:custom.stage}
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - apigateway.amazonaws.com
              Action:
                - sts:AssumeRole
    S3BucketJournaltoolsstatic:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: journal-tools-static-${self:custom.stage}
    IndexProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
        RestApiId: !Ref ApiGatewayRestApi
        HttpMethod: GET
        AuthorizationType: NONE
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Content-Type: true
        Integration:
          Type: AWS
          Credentials: !GetAtt S3ReadRole.Arn
          Uri: !Join
            - ""
            - - arn:aws:apigateway:${self:custom.region}:s3:path/
              - !Ref S3BucketJournaltoolsstatic
              - /index.html
          IntegrationHttpMethod: GET
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Content-Type: integration.response.header.Content-Type
          PassthroughBehavior: WHEN_NO_MATCH
    ProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
        PathPart: "{proxy+}"
        RestApiId: !Ref ApiGatewayRestApi
    ProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ResourceId: !Ref ProxyResource
        RestApiId: !Ref ApiGatewayRestApi
        HttpMethod: GET
        AuthorizationType: NONE
        RequestParameters:
          method.request.path.proxy: true
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Content-Type: true
        Integration:
          Type: AWS
          Credentials: !GetAtt S3ReadRole.Arn
          Uri: !Join
            - ""
            - - arn:aws:apigateway:${self:custom.region}:s3:path/
              - !Ref S3BucketJournaltoolsstatic
              - /{key}
          RequestParameters:
            integration.request.path.key: method.request.path.proxy
          IntegrationHttpMethod: GET
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Content-Type: integration.response.header.Content-Type
          PassthroughBehavior: WHEN_NO_MATCH

plugins:
  - serverless-apigw-binary

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  apigwBinary:
    types:
      - application/zip
      - application/vnd.openxmlformats-officedocument.wordprocessingml.document
      - multipart/form-data
